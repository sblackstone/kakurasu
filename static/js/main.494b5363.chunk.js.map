{"version":3,"sources":["constants.js","Board.js","NewGameScreen.js","InGameMenu.js","PlayerWinScreen.js","GameModel.js","Solver.js","App.js","reportWebVitals.js","index.js"],"names":["constants","Square","props","content","viewState","playerBoard","row","col","className","onClick","onSquareClick","size","HSquare","i","klass","boardMode","toggleBoardMode","FSquare","fillVal","rows","RowStartSquare","RowEndSquare","SigmaSquare","onMenuOpenClick","Header","result","push","Footer","Squares","Board","useState","setBoardMode","LevelOptions","min","max","value","NewGameForm","defaultLevel","Cookies","get","parseFloat","newLevel","setNewLevel","Fragment","onChange","e","currentTarget","set","onNewGame","NewGameScreen","InGameMenu","onGotoNewGameClick","onRestart","onCloseInGameMenuScreen","PlayerWinScreen","GameModel","solverDebugFn","target_fill_ratio","this","initState","state","greenRowSums","rowSums","redRowSums","targetGreenRowSums","targetRedRowSums","greenSum","redSum","targetGreenSum","targetRedSum","greenNeeded","redNeeded","initPlayerBoard","initStats","sigma","initTargetBoard","x","y","targetBoard","N","createBlankBoard","j","Math","random","points","newValue","length","setSquare","boardName","targetChar","sum","map","Object","assign","wonGame","checkWin","console","log","every","val","getSquare","arrayIntersectionUnused","arrays","data","unseen","Array","fill","v","entries","k","unseenResult","window","Solver","gm","fillMinMaxSquare","concat","fillMinMaxRow","fillBoardMinMax","params","waysToCompleteRow","color","squareToken","common","unused","j_real","fillBoard2","restart","candidate","curSum","solutions","red","green","slice","App","setGm","setViewState","menuState","setMenuState","draw","export","bind","passedGm","newSize","newGm","solver","hasSolution","toggleSquare","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","href","document","getElementById"],"mappings":"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","file":"static/js/main.494b5363.chunk.js","sourcesContent":["const TARGET_BOARD_FILL_RATIO = 0.60;\nconst SQUARE_EMPTY  = 0;\nconst SQUARE_GREEN  = 1;\nconst SQUARE_RED    = 2;\nconst MAX_LEVEL     = 12;\nexport const constants = { TARGET_BOARD_FILL_RATIO, SQUARE_EMPTY, SQUARE_GREEN, SQUARE_RED, MAX_LEVEL };","import { useState } from 'react';\nimport { constants } from './constants';\n\n\nfunction Square(props) {\n  const content = props.viewState.playerBoard[props.row][props.col];\n  let className = \"\";\n  if (content === constants.SQUARE_GREEN) {\n    className = \"piece piece-on\";\n  } else if (content === constants.SQUARE_RED) {\n    className = \"piece piece-off\";\n  } else {\n    className = \"piece piece-blank\"\n  }\n\n  return (\n    <div onClick={()=> { props.onSquareClick(props.row, props.col)}} className={`square game-square square-${props.size}`}>\n      <div className={`piece ${className}`}></div>\n    </div> \n  );\n}\n\nfunction HSquare(props) {\n  let content = \"\";\n  \n  if (props.i > 0 && (props.i < props.size+1)) {\n    content = props.i;\n    return (\n      <div className={`square header-square square-${props.size}`}><div className=\"value-container\">{content}</div></div>\n    );\n  } else {\n    const klass = !props.boardMode ? \"delta-on\" : \"delta-off\";\n    return (\n      <div onClick={props.toggleBoardMode} className={`square ${klass} flipper-square header-square row-start-square square-${props.size}`}>\n        <div className=\"flipper\">\n            <div className=\"flipper-top\">&#x293A;</div>\n            <div className=\"flipper-bottom\">&#x293B;</div>\n        </div>\n      </div>\n    );    \n  }\n}\n\n\nfunction FSquare(props) {\n  \n  if (props.col >= 0 && (props.col < props.size)) {\n\n    const fillVal = props.boardMode ? \"greenNeeded\" : \"redNeeded\";\n    const klass   = props.boardMode ? \"score score-on\" : \"score score-off\";\n    \n    return (\n      <div className={`square footer-square square-${props.size}`}>\n        <div className={klass}>{props.viewState.rows[props.size+props.col][fillVal]}</div>\n      </div> \n    );    \n  }\n\n\n  if (props.i === 0) {\n    return (\n      <div className={`square footer-square row-start-square square-${props.size}`}></div> \n    ); \n  }\n\n  return (\n    <div className={`square footer-square row-end-square square-${props.size}`}></div> \n  );\n}\n\n\nfunction RowStartSquare(props) {\n  return (\n    <div className={`square row-start-square square-${props.size}`}><div className=\"value-container\">{props.i}</div></div>\n  );\n}\n\nfunction RowEndSquare(props) {\n    const fillVal = props.boardMode ? \"greenNeeded\" : \"redNeeded\";\n    const klass   = props.boardMode ? \"score score-on\" : \"score score-off\";\n\n    return (\n      <div className={`square row-end-square square-${props.size}`}>\n        <div className={klass}>{props.viewState.rows[props.row][fillVal]}</div>\n      </div> \n    );    \n\n\n}\n\n  //  <div className={`square sigma-square row-end-square header-square square-${props.size}`}>&Sigma;{props.viewState.sigma}</div>    \n\n\nfunction SigmaSquare(props) {\n  return (\n    <div onClick={props.onMenuOpenClick} className={`square sigma-square row-end-square header-square square-${props.size}`}>&#9881;</div>    \n  );\n}\n\nfunction Header(props) {\n  let result = [];\n  for (let i = 0; i < props.size +1; i++) {\n    result.push(<HSquare key={`hs${i}`} i={i} {...props} />);\n  }\n  result.push(<SigmaSquare key={`hssigma`} {...props} />);\n  return result;\n};\n\nfunction Footer(props) {\n  let result = [];\n  for (let i = 0; i < props.size +2; i++) {\n    result.push(<FSquare key={`fs${i}`} col={i-1} i={i} {...props} />);\n  }\n  return result;\n};\n\nfunction Squares(props) {\n  let result = [ <Header key={\"headerSquares\"} {...props} />];\n  for (let i = 0; i < (props.size + 2)*(props.size); i++) {\n    const col = i % (props.size + 2);\n    const row = (i - col) / (props.size + 2);\n    if (col === 0) {\n      result.push(<RowStartSquare key={`rss${i}`} i={row+1} {...props} />);    \n    } else if (col === (props.size + 1)) {\n      result.push(<RowEndSquare key={`res${row}`} row={row} {...props} />);    \n    } else {\n      result.push(<Square key={`reg${i}`} i={i} row={row} col={col-1} {...props} />);\n    }\n  }\n  return [...result, <Footer key={\"footerSquares\"} {...props} />];\n}\n\nexport function Board(props) {\n  \n  const [ boardMode, setBoardMode ] = useState(true);\n  \n  const toggleBoardMode = () => {\n    setBoardMode(!boardMode);\n  };\n  \n  \n  return (\n    <div className=\"board\">\n      <Squares {...props} boardMode={boardMode} toggleBoardMode={toggleBoardMode} />\n    </div>\n  )\n}\n\n","import { useState } from 'react';\nimport { constants } from './constants';\nimport React from 'react';\nimport Cookies from 'js-cookie';\n\nfunction LevelOptions(props) {\n  let result = [];\n  for (let i = props.min; i <= props.max; i++) {\n      result.push(\n        <option key={i} value={i}>{i}x{i}</option>\n      )\n  }\n  return result;\n}\n\n\nexport function NewGameForm(props) {\n  \n  const defaultLevel = Cookies.get('defaultLevel') || 6;\n  \n  const [ newLevel, setNewLevel ] = useState(parseFloat(defaultLevel));\n\n    return (\n      <React.Fragment>\n        <select value={newLevel} onChange={(e)=> { setNewLevel(parseFloat(e.currentTarget.value)); Cookies.set('defaultLevel', e.currentTarget.value) }} >\n          <LevelOptions min={3} max={constants.MAX_LEVEL} />\n        </select>\n        <button onClick={()=> { props.onNewGame(newLevel)}}>Play</button>\n      </React.Fragment>\n      \n    )\n}\n\n\nexport function NewGameScreen(props) {\n\n\n  return (\n    <div className=\"new-game-screen\">\n    <h1>Kakurasu++</h1>\n    <NewGameForm {...props} />\n    </div>\n\n\n  )\n}\n","export function InGameMenu (props) {\n\n  return (\n    <div className=\"ingame-menu-screen\">\n      <button onClick={props.onGotoNewGameClick}>Start New Game</button>\n      <button onClick={props.onRestart}>Restart</button>\n      <button onClick={props.onCloseInGameMenuScreen}>Close</button>\n    </div>\n  )\n}\n","import { NewGameForm } from './NewGameScreen';\n\nexport function PlayerWinScreen(props) {\n\n  return (\n    <div className=\"player-win-screen\">\n    <h1>YOU WIN!</h1>\n    <h3>Again?</h3>\n    <NewGameForm {...props} />\n    </div>\n  )\n}\n","import { constants } from './constants';\n\nexport class GameModel {\n  constructor(size, solverDebugFn, target_fill_ratio) {\n    this.size = size;\n    this.solverDebugFn = solverDebugFn;\n    this.target_fill_ratio = target_fill_ratio;\n    this.initState();\n  }\n\n  initStats() {\n    this.state.rows = [];\n  \n    const greenRowSums = this.rowSums(\"playerBoard\", constants.SQUARE_GREEN); \n    const redRowSums   = this.rowSums(\"playerBoard\", constants.SQUARE_RED); \n\n    const targetGreenRowSums = this.rowSums(\"targetBoard\", constants.SQUARE_GREEN); \n    const targetRedRowSums   = this.rowSums(\"targetBoard\", constants.SQUARE_RED); \n\n\n    for (let i = 0; i < this.size*2; i++) {\n      this.state.rows[i] = {\n        greenSum:        greenRowSums[i],\n        redSum:          redRowSums[i],\n        targetGreenSum:  targetGreenRowSums[i],\n        targetRedSum:    targetRedRowSums[i],\n        greenNeeded:     targetGreenRowSums[i],\n        redNeeded:       targetRedRowSums[i],\n      };      \n    }\n\n  }\n  \nrestart() {\n  this.initPlayerBoard();\n  this.initStats();\n}\n\ninitState() {\n    this.state = {\n      size: this.size,\n      sigma: ((this.size) * (this.size + 1)) / 2,\n    };\n  \n    this.initPlayerBoard();\n    this.initTargetBoard(); \n    this.initStats();\n}\n\n\n  getTargetSquare(x,y) {\n    return this.state.targetBoard[x][y].N;\n  }\n\n  getSquare(x,y) {\n    return this.state.playerBoard[x][y].N;\n  }\n\n  initTargetBoardFake() {\n    this.state.targetBoard = this.createBlankBoard();\n    for (let i = 0; i < this.size; i++) {\n      let row = [];\n      for (let j = 0; j < this.size; j++) {\n        this.state.targetBoard[i][j].N = 2;\n      }\n    }\n    this.state.targetBoard[2][2].N = 1;\n  }\n\n  initTargetBoard() {\n    //return this.initTargetBoardFake();\n    this.state.targetBoard = this.createBlankBoard();\n    for (let i = 0; i < this.size; i++) {\n      let row = [];\n      for (let j = 0; j < this.size; j++) {\n        const fillVal = (Math.random() > (1 - this.target_fill_ratio)) ? constants.SQUARE_GREEN : constants.SQUARE_RED;\n        this.state.targetBoard[i][j].N = fillVal;\n      }\n    }\n  }\n\n  markAllPoints(points, newValue) {\n    for (let i = 0; i < points.length; i++) {\n      this.setSquare(points[i][0], points[i][1], newValue);\n    }\n  }\n\n  initPlayerBoard() {\n    this.state.playerBoard = this.createBlankBoard();\n  }\n\n  // We make the board an array of nxn objects\n  // We then create cols as if they were additional rows\n  createBlankBoard() {\n    const result = [];\n    for (let i = 0; i < this.size; i++) {\n      const row = [];\n      for (let j = 0; j < this.size; j++) {\n        row.push({N: constants.SQUARE_EMPTY});\n      }\n      result.push(row);\n    }\n\n    for (let i = 0; i < this.size; i++) {\n      const row = [];\n      for (let j = 0; j < this.size; j++) {\n        row.push(result[j][i]);\n      }\n      result.push(row);\n    }\n\n    return result;\n\n  }\n\n  rowSums(boardName, targetChar) {\n    let result = [];\n    for (let i = 0; i < this.size*2; i++) {\n      let sum = 0;\n      for (let j = 0; j < this.size; j++) {\n        if (this.state[boardName][i][j].N === targetChar) {\n          sum += (j+1);\n        }\n      }\n      result.push(sum);\n    };\n    return result;\n  }\n\n  export() {\n    let result = {\n      sigma: this.state.sigma,\n      size: this.state.size,\n      playerBoard: this.state.playerBoard.map(x => x.map(y => y.N)),\n      rows: this.state.rows.map(x => Object.assign({}, x)),\n      wonGame: this.checkWin()\n    };\n\n    return result;\n\n  }\n\n  debug(boardName=\"playerBoard\") {\n    for (let i = 0; i < this.size*2; i++) {\n      let row = [];\n      for (let j = 0; j < this.size; j++) {\n        row.push(this.state[boardName][i][j].N);\n      }\n      console.log(row);\n    }\n  }\n\n  checkWin() {\n    if (this.state.rows.every(x => (x.greenNeeded == 0 && x.redNeeded == 0))) {\n      return true;\n    }\n    return false;\n\n  }\n\n  setSquare(x,y,val) {\n    if (x >= this.size) {\n      //console.log(`Mapping (${x},${y}) to (${y},${x-this.size}) = ${val}`);\n      return this.setSquare(y, x - this.size, val);\n    }\n\n    //console.log(`Setting (${x},${y}) = ${val}`);\n    switch(this.getSquare(x,y)) {\n    case constants.SQUARE_GREEN:\n      this.state.rows[x].greenSum                  -= (y+1);\n      this.state.rows[x].greenNeeded               += (y+1);\n      this.state.rows[y+this.size].greenSum        -= (x+1);\n      this.state.rows[y+this.size].greenNeeded     += (x+1);\n      break;\n    case constants.SQUARE_RED:\n      this.state.rows[x].redSum                    -= (y+1);\n      this.state.rows[x].redNeeded                 += (y+1);\n      this.state.rows[y+this.size].redSum          -= (x+1);\n      this.state.rows[y+this.size].redNeeded       += (x+1);\n      break;\n    default:\n      break;\n    }\n\n    // Put in the new piece!\n    switch(val) {\n    case constants.SQUARE_GREEN:\n      this.state.rows[x].greenSum                 += (y+1);\n      this.state.rows[x].greenNeeded              -= (y+1);\n      this.state.rows[y+this.size].greenSum       += (x+1);\n      this.state.rows[y+this.size].greenNeeded    -= (x+1);\n      break;\n    case constants.SQUARE_RED:\n      this.state.rows[x].redSum                   += (y+1);\n      this.state.rows[x].redNeeded                -= (y+1);\n      this.state.rows[y+this.size].redSum         += (x+1);\n      this.state.rows[y+this.size].redNeeded      -= (x+1);\n      break;\n    default:\n      break;\n    }\n\n\n\n    this.state.playerBoard[x][y].N = val;\n    //console.log('needed');\n    //this.state.rows.forEach((x,i) => console.log([i, x.greenNeeded, x.redNeeded]))\n  }\n\n  toggleSquare(x,y) {\n    switch(this.getSquare(x,y)) {\n    case constants.SQUARE_GREEN:\n      this.setSquare(x,y, constants.SQUARE_RED);\n      break;\n    case constants.SQUARE_RED:\n      this.setSquare(x,y, constants.SQUARE_EMPTY);\n      break;\n    default:\n      this.setSquare(x,y, constants.SQUARE_GREEN);\n      break;\n    }\n  }\n\n}\n","import { constants } from './constants';\n\nconst oppositeToken = function(token) {\n  return (token === 1) ? 2 : 1;\n};\n\nconst arrayIntersectionUnused = (arrays, size) => {\n  let data = {};\n  let unseen = Array(size + 1).fill(true);\n\n  for (let i = 0; i < arrays.length; i++) {\n    for (let j = 0; j < arrays[i].length; j++) {\n      const v = arrays[i][j];\n      unseen[v] = false;\n      data[v] = data[v] || 0;\n      data[v] += 1;\n    }\n  }\n\n  let result = [];\n  for (const [k,v] of Object.entries(data)) {\n    if (v === arrays.length) {\n      result.push(+k);\n    }\n  }\n\n  let unseenResult = [];\n  for (let i = 1; i <= size; i++) {\n    if (unseen[i]) {\n      unseenResult.push(i);\n    }\n  }\n  return [ result, unseenResult ];\n\n}\n\n\nwindow.arrayIntersectionUnused = arrayIntersectionUnused;\n\nexport class Solver {\n  constructor(gm) {\n    this.size = gm.size;\n    this.gm = gm;\n  }\n  \n  fillMinMaxSquare(i,j) {\n      if (this.gm.getSquare(i,j) === constants.SQUARE_EMPTY) {\n        const v = j+1;\n        //console.log(`Inspecting ${i},${j}`);\n        if (v > this.gm.state.rows[i].greenNeeded) {\n          //console.log(`${v} is too big for ${i},${j} green, we need ${this.gm.state.rows[i].greenNeeded}`);\n          this.gm.setSquare(i,j, constants.SQUARE_RED);\n          return true;\n        } else if (v > this.gm.state.rows[i].redNeeded) {\n          //console.log(`${v} is too big for ${i},${j} red, we need ${this.gm.state.rows[i].redNeeded}`);\n          this.gm.setSquare(i,j, constants.SQUARE_GREEN);\n          return true;\n        } else {\n          return false;\n        }\n      }\n      return false;\n  }\n\n  fillMinMaxRow(i) {\n    const points = [];\n    for (let j = 0; j < this.size; j++) {\n      if (this.fillMinMaxSquare(i,j)) {\n        points.push([i,j]);\n      }\n    }\n    return points;\n  }\n\n  fillBoardMinMax() {\n    let points = [];\n    for (let i = 0; i < this.size*2; i++) {\n      points = points.concat(this.fillMinMaxRow(i));\n    }\n    \n    if (points.length > 0) {\n      points = points.concat(this.fillBoardMinMax());\n    }\n    return points;\n\n  }\n\n\n  // needs to be checked... should be good?\n  fillBoard2() {\n\n    const params = {\n      \"green\": constants.SQUARE_GREEN,\n      \"red\": constants.SQUARE_RED\n    };\n    \n\n\n\n    for (let i = 0; i < this.size*2; i++) {\n      const data = this.waysToCompleteRow(i);\n      for (const [color,squareToken] of Object.entries(params)) {\n        const [common, unused ] = arrayIntersectionUnused(data[color], this.size);\n        for (let j = 0; j < common.length; j++) {\n            this.gm.setSquare(i, common[j]-1, squareToken);\n        }\n        for (let j = 0; j < unused.length; j++) {\n            const j_real = unused[j]-1;\n            if (this.gm.getSquare(i, j_real) === constants.SQUARE_EMPTY) {\n              this.gm.setSquare(i, j_real, oppositeToken(squareToken));\n            }\n        }\n      }\n    }\n  }\n\n  solve() {\n    for (let i = 0; i < 10; i++) {\n      this.fillBoardMinMax();\n      this.fillBoard2();\n    }\n  }\n\n\n  hasSolution() {\n    for (let i = 0; i < 10; i++) {\n      this.fillBoardMinMax();\n      this.fillBoard2();\n      if (this.gm.checkWin()) {\n        this.gm.restart();\n        return true;\n      }\n    }\n    this.gm.restart();\n    return false;\n\n  }\n\n\n  \n  waysToCompleteRow(i, j=0, candidate = [], curSum=0, solutions = { red: [], green: []}) {\n    if (curSum === this.gm.state.rows[i].greenNeeded) {\n      solutions.green.push(candidate.slice(0));\n    }\n    if (curSum === this.gm.state.rows[i].redNeeded) {\n      solutions.red.push(candidate.slice(0));\n    }\n\n    if (j === this.size) {\n      return solutions;\n    }\n\n    if (this.gm.getSquare(i,j) === constants.SQUARE_EMPTY) {\n      this.waysToCompleteRow(i, j+1, [...candidate, (j+1)], curSum+(j+1), solutions);\n    }\n\n    this.waysToCompleteRow(i, j+1, candidate, curSum, solutions);\n    if (j === 0) {\n      return solutions;\n    }\n  }\n}\n\n","import './App.scss';\nimport { Board } from './Board';\nimport { NewGameScreen } from './NewGameScreen';\nimport { InGameMenu } from './InGameMenu';\nimport { PlayerWinScreen } from './PlayerWinScreen';\nimport { GameModel } from './GameModel';\nimport { useState } from 'react';\nimport { Solver } from './Solver';\n\nfunction App() {\n  const [ gm, setGm ] = useState(null);\n  const [ viewState, setViewState ] = useState(null);\n  const [ menuState, setMenuState ] = useState(false);\n\n  const draw = () => { \n    if (gm) { \n      setViewState(gm.export());  \n    } \n  };\n\n  window.draw = draw.bind(this);\n\n  const onMenuOpenClick = function() {\n    setMenuState(true);\n  }\n\n  const onCloseInGameMenuScreen = function() {\n    setMenuState(false);  \n  }\n\n  const onGotoNewGameClick = function() {\n    setGm(null);\n    setViewState(null);\n  }\n  const onSquareClick = function(i,j) {\n    gm.toggleSquare(i,j);\n    gm.debug();\n    draw();\n  } \n \n  const solverDebugFn = (passedGm) => {\n    draw();   \n  };\n \n  const onRestart = () => {\n    console.log(\"Calling GM.restart()\");\n    gm.restart();\n    setMenuState(false);  \n    setViewState(gm.export());\n  }\n\n  const onNewGame = function(newSize) {\n    let target_fill_ratio = 0.45;\n    let newGm = new GameModel(newSize, solverDebugFn, target_fill_ratio);\n    let solver = new Solver(newGm);\n    setMenuState(false);  \n    while (!solver.hasSolution()) {\n      console.log(\"No Solution\");\n      target_fill_ratio += 0.01;\n      console.log(`tfr = ${target_fill_ratio}`);\n      newGm = new GameModel(newSize, solverDebugFn, target_fill_ratio);\n      solver = new Solver(newGm);\n    }\n\n    setGm(newGm);\n    setViewState(newGm.export());\n    window.solver = solver;\n\n  }\n   \n  window.gm = gm;\n  if (viewState === null) {\n    return (\n      <div className=\"container\">\n        <NewGameScreen onNewGame={onNewGame} />\n      </div>\n    );\n  }\n\n  if (menuState) {\n    return (\n      <div className=\"container\">\n        <InGameMenu viewState={viewState} onCloseInGameMenuScreen={onCloseInGameMenuScreen} onGotoNewGameClick={onGotoNewGameClick} onRestart={onRestart} />\n      </div>\n      \n    )\n  }\n\n  \n  if (viewState.wonGame) {\n    return (\n      <div className=\"container\">\n        <PlayerWinScreen viewState={viewState} onNewGame={onNewGame} />\n      </div>\n      \n    )\n  }\n  \n  return (\n    <div className=\"container\">\n      <Board size={viewState.size} onSquareClick={onSquareClick} viewState={viewState} onMenuOpenClick={onMenuOpenClick} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n    <link href=\"https://fonts.googleapis.com/css2?family=Texturina:wght@100&display=swap\" rel=\"stylesheet\" />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}